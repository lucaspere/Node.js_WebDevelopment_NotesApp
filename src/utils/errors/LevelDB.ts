export enum LEVEL_DB_ERRORS_TYPES {
    /** @description When a key was not found. */
    LEVEL_NOT_FOUND = 'LEVEL_NOT_FOUND',
    LEVEL_DATABASE_NOT_OPEN = 'LEVEL_DATABASE_NOT_OPEN',
    LEVEL_DATABASE_NOT_CLOSED = 'LEVEL_DATABASE_NOT_CLOSED',
    LEVEL_ITERATOR_NOT_OPEN = 'LEVEL_ITERATOR_NOT_OPEN',
    LEVEL_ITERATOR_BUSY = 'LEVEL_ITERATOR_BUSY',
    LEVEL_BATCH_NOT_OPEN = 'LEVEL_BATCH_NOT_OPEN',
    LEVEL_ENCODING_NOT_FOUND = 'LEVEL_ENCODING_NOT_FOUND',
    LEVEL_ENCODING_NOT_SUPPORTED = 'LEVEL_ENCODING_NOT_SUPPORTED',
    LEVEL_DECODE_ERROR = 'LEVEL_DECODE_ERROR',
    LEVEL_INVALID_KEY = 'LEVEL_INVALID_KEY',
    LEVEL_INVALID_VALUE = 'LEVEL_INVALID_VALUE',
    LEVEL_CORRUPTION = 'LEVEL_CORRUPTION',
    LEVEL_IO_ERROR = 'LEVEL_IO_ERROR',
    LEVEL_INVALID_PREFIX = 'LEVEL_INVALID_PREFIX',
    LEVEL_NOT_SUPPORTED = 'LEVEL_NOT_SUPPORTED',
    LEVEL_LEGACY = 'LEVEL_LEGACY',
    LEVEL_LOCKED = 'LEVEL_LOCKED',
    LEVEL_READONLY = 'LEVEL_READONLY',
    LEVEL_CONNECTION_LOST = 'LEVEL_CONNECTION_LOST',
    LEVEL_REMOTE_ERROR = 'LEVEL_REMOTE_ERROR',
}

export interface LevelErrorResponse {
    code: string;
    status?: number;
    message: string | symbol;
    [key: string]: string | number | undefined | symbol;
}
